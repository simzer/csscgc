
#define __STDC__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 4
#define __GNUC_MINOR__ 3
#define __GNUC_PATCHLEVEL__ 3
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __GXX_ABI_VERSION 1002
#define __SCHAR_MAX__ 127
#define __SHRT_MAX__ 32767
#define __INT_MAX__ 2147483647
#define __LONG_MAX__ 2147483647L
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __WCHAR_MAX__ 2147483647
#define __CHAR_BIT__ 8
#define __INTMAX_MAX__ 9223372036854775807LL
#define __FLT_EVAL_METHOD__ 2
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_MAX__ 3.40282347e+38F
#define __FLT_MIN__ 1.17549435e-38F
#define __FLT_EPSILON__ 1.19209290e-7F
#define __FLT_DENORM_MIN__ 1.40129846e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_MAX__ 1.7976931348623157e+308
#define __DBL_MIN__ 2.2250738585072014e-308
#define __DBL_EPSILON__ 2.2204460492503131e-16
#define __DBL_DENORM_MIN__ 4.9406564584124654e-324
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 64
#define __LDBL_DIG__ 18
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 21
#define __LDBL_MAX__ 1.18973149535723176502e+4932L
#define __LDBL_MIN__ 3.36210314311209350626e-4932L
#define __LDBL_EPSILON__ 1.08420217248550443401e-19L
#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-95)
#define __DEC32_MAX_EXP__ 96
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_DEN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-383)
#define __DEC64_MAX_EXP__ 384
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_DEN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6143)
#define __DEC128_MAX_EXP__ 6144
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_DEN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __VERSION__ "4.3.3"
#define __GNUC_GNU_INLINE__ 1
#define __NO_INLINE__ 1
#define __FINITE_MATH_ONLY__ 0
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 12
#define __SIZEOF_SIZE_T__ 4
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 4
#define __SIZEOF_POINTER__ 4
#define __i386 1
#define __i386__ 1
#define i386 1
#define __i486 1
#define __i486__ 1
#define __gnu_linux__ 1
#define __linux 1
#define __linux__ 1
#define linux 1
#define __unix 1
#define __unix__ 1
#define unix 1
#define __ELF__ 1
#define __DECIMAL_BID_FORMAT__ 1
#define _FORTIFY_SOURCE 2
#define _STRINGS_H 1
#define _FEATURES_H 1
#undef __USE_ISOC99
#undef __USE_ISOC95
#undef __USE_POSIX
#undef __USE_POSIX2
#undef __USE_POSIX199309
#undef __USE_POSIX199506
#undef __USE_XOPEN
#undef __USE_XOPEN_EXTENDED
#undef __USE_UNIX98
#undef __USE_XOPEN2K
#undef __USE_LARGEFILE
#undef __USE_LARGEFILE64
#undef __USE_FILE_OFFSET64
#undef __USE_BSD
#undef __USE_SVID
#undef __USE_MISC
#undef __USE_ATFILE
#undef __USE_GNU
#undef __USE_REENTRANT
#undef __USE_FORTIFY_LEVEL
#undef __FAVOR_BSD
#undef __KERNEL_STRICT_NAMES
#define __KERNEL_STRICT_NAMES 
#define __USE_ANSI 1
#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
#define _BSD_SOURCE 1
#define _SVID_SOURCE 1
#define _POSIX_SOURCE 1
#define _POSIX_C_SOURCE 200112L
#define __USE_POSIX 1
#define __USE_POSIX2 1
#define __USE_POSIX199309 1
#define __USE_POSIX199506 1
#define __USE_XOPEN2K 1
#define __USE_MISC 1
#define __USE_BSD 1
#define __USE_SVID 1
#define __USE_FORTIFY_LEVEL 0
#define __STDC_IEC_559__ 1
#define __STDC_IEC_559_COMPLEX__ 1
#define __STDC_ISO_10646__ 200009L
#undef __GNU_LIBRARY__
#define __GNU_LIBRARY__ 6
#define __GLIBC__ 2
#define __GLIBC_MINOR__ 9
#define __GLIBC_PREREQ(maj,min) ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
#define __GLIBC_HAVE_LONG_LONG 1
#define _SYS_CDEFS_H 1
#undef __P
#undef __PMT
#define __THROW __attribute__ ((__nothrow__))
#define __NTH(fct) __attribute__ ((__nothrow__)) fct
#define __P(args) args
#define __PMT(args) args
#define __CONCAT(x,y) x ## y
#define __STRING(x) #x
#define __ptr_t void *
#define __long_double_t long double
#define __BEGIN_DECLS 
#define __END_DECLS 
#define __BEGIN_NAMESPACE_STD 
#define __END_NAMESPACE_STD 
#define __USING_NAMESPACE_STD(name) 
#define __BEGIN_NAMESPACE_C99 
#define __END_NAMESPACE_C99 
#define __USING_NAMESPACE_C99(name) 
#define __bounded 
#define __unbounded 
#define __ptrvalue 
#define __bos(ptr) __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1)
#define __bos0(ptr) __builtin_object_size (ptr, 0)
#define __warndecl(name,msg) extern void name (void) __attribute__((__warning__ (msg)))
#define __warnattr(msg) __attribute__((__warning__ (msg)))
#define __errordecl(name,msg) extern void name (void) __attribute__((__error__ (msg)))
#define __flexarr []
#define __REDIRECT(name,proto,alias) name proto __asm__ (__ASMNAME (#alias))
#define __REDIRECT_NTH(name,proto,alias) name proto __asm__ (__ASMNAME (#alias)) __THROW
#define __ASMNAME(cname) __ASMNAME2 (__USER_LABEL_PREFIX__, cname)
#define __ASMNAME2(prefix,cname) __STRING (prefix) cname
#define __attribute_malloc__ __attribute__ ((__malloc__))
#define __attribute_pure__ __attribute__ ((__pure__))
#define __attribute_used__ __attribute__ ((__used__))
#define __attribute_noinline__ __attribute__ ((__noinline__))
#define __attribute_deprecated__ __attribute__ ((__deprecated__))
#define __attribute_format_arg__(x) __attribute__ ((__format_arg__ (x)))
#define __attribute_format_strfmon__(a,b) __attribute__ ((__format__ (__strfmon__, a, b)))
#define __nonnull(params) __attribute__ ((__nonnull__ params))
#define __attribute_warn_unused_result__ __attribute__ ((__warn_unused_result__))
#define __wur 
#define __always_inline __inline __attribute__ ((__always_inline__))
#define __extern_inline extern __inline
#define __extern_always_inline extern __always_inline
#define __va_arg_pack() __builtin_va_arg_pack ()
#define __va_arg_pack_len() __builtin_va_arg_pack_len ()
#define __restrict_arr __restrict
#define __WORDSIZE 32
#define __LDBL_REDIR1(name,proto,alias) name proto
#define __LDBL_REDIR(name,proto) name proto
#define __LDBL_REDIR1_NTH(name,proto,alias) name proto __THROW
#define __LDBL_REDIR_NTH(name,proto) name proto __THROW
#define __LDBL_REDIR_DECL(name) 
#define __REDIRECT_LDBL(name,proto,alias) __REDIRECT (name, proto, alias)
#define __REDIRECT_NTH_LDBL(name,proto,alias) __REDIRECT_NTH (name, proto, alias)
#define __WORDSIZE 32
#define __stub___kernel_cosl 
#define __stub___kernel_sinl 
#define __stub___kernel_tanl 
#define __stub_chflags 
#define __stub_fattach 
#define __stub_fchflags 
#define __stub_fdetach 
#define __stub_gtty 
#define __stub_lchmod 
#define __stub_revoke 
#define __stub_setlogin 
#define __stub_sigreturn 
#define __stub_sstk 
#define __stub_stty 
#define __need_size_t 
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 
#define __size_t 
typedef unsigned int size_t;
#undef __need_size_t
#undef __need_NULL

extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__));
extern void bcopy (__const void *__src, void *__dest, size_t __n) __attribute__ ((__nothrow__));
extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__));
extern int ffs (int __i) __attribute__ ((__nothrow__)) __attribute__ ((const));
extern char *index (__const char *__s, int __c) __attribute__ ((__nothrow__)) __attribute__ ((__pure__));
extern char *rindex (__const char *__s, int __c) __attribute__ ((__nothrow__)) __attribute__ ((__pure__));
extern int strcasecmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__));
extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__));

#define __need_size_t 
#define __need_wchar_t 
#define __need_NULL 
#undef __need_size_t
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
#undef _BSD_WCHAR_T_
typedef int wchar_t;
#undef __need_wchar_t
#undef NULL
#define NULL ((void *)0)
#undef __need_NULL

#define _STDLIB_H 1

typedef struct
  {
    int quot;
    int rem;
  } div_t;
typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;
#define __ldiv_t_defined 1

#define RAND_MAX 2147483647
#define EXIT_FAILURE 1
#define EXIT_SUCCESS 0
#define MB_CUR_MAX (__ctype_get_mb_cur_max ())
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__)) ;

extern double atof (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
extern int atoi (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
extern long int atol (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;


__extension__ extern long long int atoll (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;


extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;


extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern char *l64a (long int __n) __attribute__ ((__nothrow__)) ;
extern long int a64l (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
#define _SYS_TYPES_H 1

#define _BITS_TYPES_H 1
#define __WORDSIZE 32
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;
__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
#define __S16_TYPE short int
#define __U16_TYPE unsigned short int
#define __S32_TYPE int
#define __U32_TYPE unsigned int
#define __SLONGWORD_TYPE long int
#define __ULONGWORD_TYPE unsigned long int
#define __SQUAD_TYPE __quad_t
#define __UQUAD_TYPE __u_quad_t
#define __SWORD_TYPE int
#define __UWORD_TYPE unsigned int
#define __SLONG32_TYPE long int
#define __ULONG32_TYPE unsigned long int
#define __S64_TYPE __quad_t
#define __U64_TYPE __u_quad_t
#define __STD_TYPE __extension__ typedef
#define _BITS_TYPESIZES_H 1
#define __DEV_T_TYPE __UQUAD_TYPE
#define __UID_T_TYPE __U32_TYPE
#define __GID_T_TYPE __U32_TYPE
#define __INO_T_TYPE __ULONGWORD_TYPE
#define __INO64_T_TYPE __UQUAD_TYPE
#define __MODE_T_TYPE __U32_TYPE
#define __NLINK_T_TYPE __UWORD_TYPE
#define __OFF_T_TYPE __SLONGWORD_TYPE
#define __OFF64_T_TYPE __SQUAD_TYPE
#define __PID_T_TYPE __S32_TYPE
#define __RLIM_T_TYPE __ULONGWORD_TYPE
#define __RLIM64_T_TYPE __UQUAD_TYPE
#define __BLKCNT_T_TYPE __SLONGWORD_TYPE
#define __BLKCNT64_T_TYPE __SQUAD_TYPE
#define __FSBLKCNT_T_TYPE __ULONGWORD_TYPE
#define __FSBLKCNT64_T_TYPE __UQUAD_TYPE
#define __FSFILCNT_T_TYPE __ULONGWORD_TYPE
#define __FSFILCNT64_T_TYPE __UQUAD_TYPE
#define __ID_T_TYPE __U32_TYPE
#define __CLOCK_T_TYPE __SLONGWORD_TYPE
#define __TIME_T_TYPE __SLONGWORD_TYPE
#define __USECONDS_T_TYPE __U32_TYPE
#define __SUSECONDS_T_TYPE __SLONGWORD_TYPE
#define __DADDR_T_TYPE __S32_TYPE
#define __SWBLK_T_TYPE __SLONGWORD_TYPE
#define __KEY_T_TYPE __S32_TYPE
#define __CLOCKID_T_TYPE __S32_TYPE
#define __TIMER_T_TYPE void *
#define __BLKSIZE_T_TYPE __SLONGWORD_TYPE
#define __FSID_T_TYPE struct { int __val[2]; }
#define __SSIZE_T_TYPE __SWORD_TYPE
#define __FD_SETSIZE 1024
__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;
__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;
__extension__ typedef int __clockid_t;
__extension__ typedef void * __timer_t;
__extension__ typedef long int __blksize_t;
__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;
__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;
__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;
__extension__ typedef int __ssize_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
__extension__ typedef int __intptr_t;
__extension__ typedef unsigned int __socklen_t;
#undef __STD_TYPE
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
#define __u_char_defined 
typedef __loff_t loff_t;
typedef __ino_t ino_t;
#define __ino_t_defined 
typedef __dev_t dev_t;
#define __dev_t_defined 
typedef __gid_t gid_t;
#define __gid_t_defined 
typedef __mode_t mode_t;
#define __mode_t_defined 
typedef __nlink_t nlink_t;
#define __nlink_t_defined 
typedef __uid_t uid_t;
#define __uid_t_defined 
typedef __off_t off_t;
#define __off_t_defined 
typedef __pid_t pid_t;
#define __pid_t_defined 
typedef __id_t id_t;
#define __id_t_defined 
typedef __ssize_t ssize_t;
#define __ssize_t_defined 
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
#define __daddr_t_defined 
typedef __key_t key_t;
#define __key_t_defined 
#define __need_time_t 
#define __need_timer_t 
#define __need_clockid_t 
#undef __need_clock_t
#define __time_t_defined 1

typedef __time_t time_t;


#undef __need_time_t
#define __clockid_t_defined 1
typedef __clockid_t clockid_t;
#undef __clockid_time_t
#define __timer_t_defined 1
typedef __timer_t timer_t;
#undef __need_timer_t
#undef __need_timespec
#define __need_size_t 
#undef __need_size_t
#undef __need_NULL
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
#define __intN_t(N,MODE) typedef int int ##N ##_t __attribute__ ((__mode__ (MODE)))
#define __u_intN_t(N,MODE) typedef unsigned int u_int ##N ##_t __attribute__ ((__mode__ (MODE)))
#define __int8_t_defined 
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));
typedef int register_t __attribute__ ((__mode__ (__word__)));
#define __BIT_TYPES_DEFINED__ 1
#define _ENDIAN_H 1
#define __LITTLE_ENDIAN 1234
#define __BIG_ENDIAN 4321
#define __PDP_ENDIAN 3412
#define __BYTE_ORDER __LITTLE_ENDIAN
#define __FLOAT_WORD_ORDER __BYTE_ORDER
#define LITTLE_ENDIAN __LITTLE_ENDIAN
#define BIG_ENDIAN __BIG_ENDIAN
#define PDP_ENDIAN __PDP_ENDIAN
#define BYTE_ORDER __BYTE_ORDER
#define __LONG_LONG_PAIR(HI,LO) LO, HI
#define _BITS_BYTESWAP_H 1
#define __WORDSIZE 32
#define __bswap_constant_16(x) ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8))
#define __bswap_16(x) (__extension__ ({ register unsigned short int __v, __x = (x); if (__builtin_constant_p (__x)) __v = __bswap_constant_16 (__x); else __asm__ ("rorw $8, %w0" : "=r" (__v) : "0" (__x) : "cc"); __v; }))
#define __bswap_constant_32(x) ((((x) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | (((x) & 0x0000ff00) << 8) | (((x) & 0x000000ff) << 24))
#define __bswap_32(x) (__extension__ ({ register unsigned int __v, __x = (x); if (__builtin_constant_p (__x)) __v = __bswap_constant_32 (__x); else __asm__ ("bswap %0" : "=r" (__v) : "0" (__x)); __v; }))
#define __bswap_constant_64(x) ((((x) & 0xff00000000000000ull) >> 56) | (((x) & 0x00ff000000000000ull) >> 40) | (((x) & 0x0000ff0000000000ull) >> 24) | (((x) & 0x000000ff00000000ull) >> 8) | (((x) & 0x00000000ff000000ull) << 8) | (((x) & 0x0000000000ff0000ull) << 24) | (((x) & 0x000000000000ff00ull) << 40) | (((x) & 0x00000000000000ffull) << 56))
#define __bswap_64(x) (__extension__ ({ union { __extension__ unsigned long long int __ll; unsigned int __l[2]; } __w, __r; if (__builtin_constant_p (x)) __r.__ll = __bswap_constant_64 (x); else { __w.__ll = (x); __r.__l[0] = __bswap_32 (__w.__l[1]); __r.__l[1] = __bswap_32 (__w.__l[0]); } __r.__ll; }))
#define htobe16(x) __bswap_16 (x)
#define htole16(x) (x)
#define be16toh(x) __bswap_16 (x)
#define le16toh(x) (x)
#define htobe32(x) __bswap_32 (x)
#define htole32(x) (x)
#define be32toh(x) __bswap_32 (x)
#define le32toh(x) (x)
#define htobe64(x) __bswap_64 (x)
#define htole64(x) (x)
#define be64toh(x) __bswap_64 (x)
#define le64toh(x) (x)
#define _SYS_SELECT_H 1
#define __FD_ZERO(s) do { unsigned int __i; fd_set *__arr = (s); for (__i = 0; __i < sizeof (fd_set) / sizeof (__fd_mask); ++__i) __FDS_BITS (__arr)[__i] = 0; } while (0)
#define __FD_SET(d,s) (__FDS_BITS (s)[__FDELT(d)] |= __FDMASK(d))
#define __FD_CLR(d,s) (__FDS_BITS (s)[__FDELT(d)] &= ~__FDMASK(d))
#define __FD_ISSET(d,s) ((__FDS_BITS (s)[__FDELT(d)] & __FDMASK(d)) != 0)
#define _SIGSET_H_types 1
typedef int __sig_atomic_t;
#define _SIGSET_NWORDS (1024 / (8 * sizeof (unsigned long int)))
typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
#define __sigset_t_defined 
typedef __sigset_t sigset_t;
#define __need_time_t 
#define __need_timespec 
#undef __need_clock_t
#undef __need_time_t
#undef __clockid_time_t
#undef __need_timer_t
#define __timespec_defined 1
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
#undef __need_timespec
#define __need_timeval 
#undef __need_timeval
#define _STRUCT_TIMEVAL 1
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
typedef __suseconds_t suseconds_t;
#define __suseconds_t_defined 
typedef long int __fd_mask;
#undef __NFDBITS
#undef __FDELT
#undef __FDMASK
#define __NFDBITS (8 * sizeof (__fd_mask))
#define __FDELT(d) ((d) / __NFDBITS)
#define __FDMASK(d) ((__fd_mask) 1 << ((d) % __NFDBITS))
typedef struct
  {
    __fd_mask __fds_bits[1024 / (8 * sizeof (__fd_mask))];
#define __FDS_BITS(set) ((set)->__fds_bits)
  } fd_set;
#define FD_SETSIZE __FD_SETSIZE
typedef __fd_mask fd_mask;
#define NFDBITS __NFDBITS
#define FD_SET(fd,fdsetp) __FD_SET (fd, fdsetp)
#define FD_CLR(fd,fdsetp) __FD_CLR (fd, fdsetp)
#define FD_ISSET(fd,fdsetp) __FD_ISSET (fd, fdsetp)
#define FD_ZERO(fdsetp) __FD_ZERO (fdsetp)

extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);

#define _SYS_SYSMACROS_H 1
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__));
#define major(dev) gnu_dev_major (dev)
#define minor(dev) gnu_dev_minor (dev)
#define makedev(maj,min) gnu_dev_makedev (maj, min)
typedef __blkcnt_t blkcnt_t;
#define __blkcnt_t_defined 
typedef __fsblkcnt_t fsblkcnt_t;
#define __fsblkcnt_t_defined 
typedef __fsfilcnt_t fsfilcnt_t;
#define __fsfilcnt_t_defined 
#define _BITS_PTHREADTYPES_H 1
#define __WORDSIZE 32
#define __SIZEOF_PTHREAD_ATTR_T 36
#define __SIZEOF_PTHREAD_MUTEX_T 24
#define __SIZEOF_PTHREAD_MUTEXATTR_T 4
#define __SIZEOF_PTHREAD_COND_T 48
#define __SIZEOF_PTHREAD_CONDATTR_T 4
#define __SIZEOF_PTHREAD_RWLOCK_T 32
#define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
#define __SIZEOF_PTHREAD_BARRIER_T 20
#define __SIZEOF_PTHREAD_BARRIERATTR_T 4
typedef unsigned long int pthread_t;
typedef union
{
  char __size[36];
  long int __align;
} pthread_attr_t;
typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;
    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;
typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;
    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;
typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
#define __cleanup_fct_attribute __attribute__ ((__regparm__ (1)))

extern long int random (void) __attribute__ ((__nothrow__));
extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__));
extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };
extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));
extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int rand (void) __attribute__ ((__nothrow__));
extern void srand (unsigned int __seed) __attribute__ ((__nothrow__));

extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__));
extern double drand48 (void) __attribute__ ((__nothrow__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern long int lrand48 (void) __attribute__ ((__nothrow__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern long int mrand48 (void) __attribute__ ((__nothrow__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern void srand48 (long int __seedval) __attribute__ ((__nothrow__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };
extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
#define __malloc_and_calloc_defined 

extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;
extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;


extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));
extern void free (void *__ptr) __attribute__ ((__nothrow__));

extern void cfree (void *__ptr) __attribute__ ((__nothrow__));
#define _ALLOCA_H 1
#define __need_size_t 
#undef __need_size_t
#undef __need_NULL

#undef alloca
extern void *alloca (size_t __size) __attribute__ ((__nothrow__));
#define alloca(size) __builtin_alloca (size)

extern void *valloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;
extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern void abort (void) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));
extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));

extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));

extern void exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));


extern char *getenv (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern char *__secure_getenv (__const char *__name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern int putenv (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int setenv (__const char *__name, __const char *__value, int __replace)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
extern int unsetenv (__const char *__name) __attribute__ ((__nothrow__));
extern int clearenv (void) __attribute__ ((__nothrow__));
extern char *mktemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern int system (__const char *__command) ;

extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__)) ;
#define __COMPAR_FN_T 
typedef int (*__compar_fn_t) (__const void *, __const void *);

extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;
extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
extern int abs (int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;


extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;

extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;
extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;
extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int mblen (__const char *__s, size_t __n) __attribute__ ((__nothrow__)) ;
extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__)) ;
extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__)) ;
extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__));
extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__));

extern int rpmatch (__const char *__response) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern int posix_openpt (int __oflag) ;
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
#undef __need_malloc_and_calloc

#define _STDIO_H 1

#define __need_size_t 
#define __need_NULL 
#undef __need_size_t
#undef NULL
#define NULL ((void *)0)
#undef __need_NULL
#define __need_FILE 
#define __need___FILE 
struct _IO_FILE;

typedef struct _IO_FILE FILE;


#define __FILE_defined 1
#undef __need_FILE
typedef struct _IO_FILE __FILE;
#define ____FILE_defined 1
#undef __need___FILE
#define _STDIO_USES_IOSTREAM 
#define _IO_STDIO_H 
#define _G_config_h 1
#define __need_size_t 
#define __need_NULL 
#undef __need_size_t
#undef NULL
#define NULL ((void *)0)
#undef __need_NULL
#define __need_mbstate_t 
#define __mbstate_t_defined 1
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
#undef __need_mbstate_t
#undef __need_mbstate_t
#undef __need_wint_t
#define _G_size_t size_t
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
#define _G_ssize_t __ssize_t
#define _G_off_t __off_t
#define _G_off64_t __off64_t
#define _G_pid_t __pid_t
#define _G_uid_t __uid_t
#define _G_wchar_t wchar_t
#define _G_wint_t wint_t
#define _G_stat64 stat64
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
#define _G_HAVE_BOOL 1
#define _G_HAVE_ATEXIT 1
#define _G_HAVE_SYS_CDEFS 1
#define _G_HAVE_SYS_WAIT 1
#define _G_NEED_STDARG_H 1
#define _G_va_list __gnuc_va_list
#define _G_HAVE_PRINTF_FP 1
#define _G_HAVE_MMAP 1
#define _G_HAVE_MREMAP 1
#define _G_HAVE_LONG_DOUBLE_IO 1
#define _G_HAVE_IO_FILE_OPEN 1
#define _G_HAVE_IO_GETLINE_INFO 1
#define _G_IO_IO_FILE_VERSION 0x20001
#define _G_OPEN64 __open64
#define _G_LSEEK64 __lseek64
#define _G_MMAP64 __mmap64
#define _G_FSTAT64(fd,buf) __fxstat64 (_STAT_VER, fd, buf)
#define _G_HAVE_ST_BLKSIZE defined (_STATBUF_ST_BLKSIZE)
#define _G_BUFSIZ 8192
#define _G_NAMES_HAVE_UNDERSCORE 0
#define _G_VTABLE_LABEL_HAS_LENGTH 1
#define _G_USING_THUNKS 1
#define _G_VTABLE_LABEL_PREFIX "__vt_"
#define _G_VTABLE_LABEL_PREFIX_ID __vt_
#define _G_ARGS(ARGLIST) ARGLIST
#define _IO_pos_t _G_fpos_t
#define _IO_fpos_t _G_fpos_t
#define _IO_fpos64_t _G_fpos64_t
#define _IO_size_t _G_size_t
#define _IO_ssize_t _G_ssize_t
#define _IO_off_t _G_off_t
#define _IO_off64_t _G_off64_t
#define _IO_pid_t _G_pid_t
#define _IO_uid_t _G_uid_t
#define _IO_iconv_t _G_iconv_t
#define _IO_HAVE_SYS_WAIT _G_HAVE_SYS_WAIT
#define _IO_HAVE_ST_BLKSIZE _G_HAVE_ST_BLKSIZE
#define _IO_BUFSIZ _G_BUFSIZ
#define _IO_va_list _G_va_list
#define _IO_wint_t _G_wint_t
#define __need___va_list 
#undef __need___va_list
#define __GNUC_VA_LIST 
typedef __builtin_va_list __gnuc_va_list;
#undef _IO_va_list
#define _IO_va_list __gnuc_va_list
#define _PARAMS(protos) __P(protos)
#define _IO_UNIFIED_JUMPTABLES 1
#define EOF (-1)
#define _IOS_INPUT 1
#define _IOS_OUTPUT 2
#define _IOS_ATEND 4
#define _IOS_APPEND 8
#define _IOS_TRUNC 16
#define _IOS_NOCREATE 32
#define _IOS_NOREPLACE 64
#define _IOS_BIN 128
#define _IO_MAGIC 0xFBAD0000
#define _OLD_STDIO_MAGIC 0xFABC0000
#define _IO_MAGIC_MASK 0xFFFF0000
#define _IO_USER_BUF 1
#define _IO_UNBUFFERED 2
#define _IO_NO_READS 4
#define _IO_NO_WRITES 8
#define _IO_EOF_SEEN 0x10
#define _IO_ERR_SEEN 0x20
#define _IO_DELETE_DONT_CLOSE 0x40
#define _IO_LINKED 0x80
#define _IO_IN_BACKUP 0x100
#define _IO_LINE_BUF 0x200
#define _IO_TIED_PUT_GET 0x400
#define _IO_CURRENTLY_PUTTING 0x800
#define _IO_IS_APPENDING 0x1000
#define _IO_IS_FILEBUF 0x2000
#define _IO_BAD_SEEN 0x4000
#define _IO_USER_LOCK 0x8000
#define _IO_FLAGS2_MMAP 1
#define _IO_FLAGS2_NOTCANCEL 2
#define _IO_FLAGS2_USER_WBUF 8
#define _IO_SKIPWS 01
#define _IO_LEFT 02
#define _IO_RIGHT 04
#define _IO_INTERNAL 010
#define _IO_DEC 020
#define _IO_OCT 040
#define _IO_HEX 0100
#define _IO_SHOWBASE 0200
#define _IO_SHOWPOINT 0400
#define _IO_UPPERCASE 01000
#define _IO_SHOWPOS 02000
#define _IO_SCIENTIFIC 04000
#define _IO_FIXED 010000
#define _IO_UNITBUF 020000
#define _IO_STDIO 040000
#define _IO_DONT_CLOSE 0100000
#define _IO_BOOLALPHA 0200000
struct _IO_jump_t; struct _IO_FILE;
typedef void _IO_lock_t;
struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;
  int _pos;
};
enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
struct _IO_FILE {
  int _flags;
#define _IO_file_flags _flags
  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;
  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;
  struct _IO_marker *_markers;
  struct _IO_FILE *_chain;
  int _fileno;
  int _flags2;
  __off_t _old_offset;
#define __HAVE_COLUMN 
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];
  _IO_lock_t *_lock;
  __off64_t _offset;
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;
  int _mode;
  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
typedef struct _IO_FILE _IO_FILE;
struct _IO_FILE_plus;
extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
#define _IO_stdin ((_IO_FILE*)(&_IO_2_1_stdin_))
#define _IO_stdout ((_IO_FILE*)(&_IO_2_1_stdout_))
#define _IO_stderr ((_IO_FILE*)(&_IO_2_1_stderr_))
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);
typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);
typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);
typedef int __io_close_fn (void *__cookie);
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
#define _IO_BE(expr,res) __builtin_expect ((expr), res)
#define _IO_getc_unlocked(_fp) (_IO_BE ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end, 0) ? __uflow (_fp) : *(unsigned char *) (_fp)->_IO_read_ptr++)
#define _IO_peekc_unlocked(_fp) (_IO_BE ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end, 0) && __underflow (_fp) == EOF ? EOF : *(unsigned char *) (_fp)->_IO_read_ptr)
#define _IO_putc_unlocked(_ch,_fp) (_IO_BE ((_fp)->_IO_write_ptr >= (_fp)->_IO_write_end, 0) ? __overflow (_fp, (unsigned char) (_ch)) : (unsigned char) (*(_fp)->_IO_write_ptr++ = (_ch)))
#define _IO_feof_unlocked(__fp) (((__fp)->_flags & _IO_EOF_SEEN) != 0)
#define _IO_ferror_unlocked(__fp) (((__fp)->_flags & _IO_ERR_SEEN) != 0)
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_peekc_locked (_IO_FILE *__fp);
#define _IO_PENDING_OUTPUT_COUNT(_fp) ((_fp)->_IO_write_ptr - (_fp)->_IO_write_base)
extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__));
#define _IO_peekc(_fp) _IO_peekc_unlocked (_fp)
#define _IO_flockfile(_fp) 
#define _IO_funlockfile(_fp) 
#define _IO_ftrylockfile(_fp) 
#define _IO_cleanup_region_start(_fct,_fp) 
#define _IO_cleanup_region_end(_Doit) 
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);
extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);
extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__));

typedef _G_fpos_t fpos_t;

#define _IOFBF 0
#define _IOLBF 1
#define _IONBF 2
#define BUFSIZ _IO_BUFSIZ
#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2
#define P_tmpdir "/tmp"
#define L_tmpnam 20
#define TMP_MAX 238328
#define FILENAME_MAX 4096
#define L_ctermid 9
#define L_cuserid 9
#undef FOPEN_MAX
#define FOPEN_MAX 16
extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;
#define stdin stdin
#define stdout stdout
#define stderr stderr

extern int remove (__const char *__filename) __attribute__ ((__nothrow__));
extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__));


extern FILE *tmpfile (void) ;
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__)) ;

extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__)) ;
extern char *tempnam (__const char *__dir, __const char *__pfx)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;

extern int fclose (FILE *__stream);
extern int fflush (FILE *__stream);

extern int fflush_unlocked (FILE *__stream);

extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;
extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;

extern FILE *fdopen (int __fd, __const char *__modes) __attribute__ ((__nothrow__)) ;

extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__));
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__));

extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__));
extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__));

extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);
extern int printf (__const char *__restrict __format, ...);
extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) __attribute__ ((__nothrow__));
extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);
extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);
extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));


extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));


extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;
extern int scanf (__const char *__restrict __format, ...) ;
extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) __attribute__ ((__nothrow__));


extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
extern int getchar (void);

#define getc(_fp) _IO_getc (_fp)
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
extern int fgetc_unlocked (FILE *__stream);

extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
extern int putchar (int __c);

#define putc(_ch,_fp) _IO_putc (_ch, _fp)
extern int fputc_unlocked (int __c, FILE *__stream);
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
extern int getw (FILE *__stream);
extern int putw (int __w, FILE *__stream);

extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
extern char *gets (char *__s) ;


extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);
extern int puts (__const char *__s);
extern int ungetc (int __c, FILE *__stream);
extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);

extern int fseek (FILE *__stream, long int __off, int __whence);
extern long int ftell (FILE *__stream) ;
extern void rewind (FILE *__stream);

extern int fseeko (FILE *__stream, __off_t __off, int __whence);
extern __off_t ftello (FILE *__stream) ;

extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
extern int fsetpos (FILE *__stream, __const fpos_t *__pos);


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__));
extern int feof (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern int ferror (FILE *__stream) __attribute__ ((__nothrow__)) ;

extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;

extern void perror (__const char *__s);

extern int sys_nerr;
extern __const char *__const sys_errlist[];
extern int fileno (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern FILE *popen (__const char *__command, __const char *__modes) ;
extern int pclose (FILE *__stream);
extern char *ctermid (char *__s) __attribute__ ((__nothrow__));
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__));
extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__));

#define NUL 100
#define G0 17461
#define Gis0 18499
#define A0 19600
#define Ais0 20765
#define H0 22000
#define C1 23308
#define Cis1 24694
#define D1 26162
#define Dis1 27718
#define E1 29366
#define F1 31113
#define Fis1 32963
#define G1 34923
#define Gis1 36999
#define A1 39200
#define Ais1 41530
#define H1 44000
#define C2 46616
#define Cis2 49388
#define D2 52325
#define Dis2 55437
#define E2 58733
#define F2 62226
unsigned int tune[2*138] =
{
 29366, 4, 29366, 2, 29366, 2, 27718, 2, 29366, 2,
 46616, 4, 34923, 2, 34923, 4, 29366, 2,
 31113, 4, 29366, 2, 31113, 4, 34923, 2,
 39200, 10, 31113, 2,
 26162, 4, 26162, 2, 26162, 2, 24694, 2, 26162, 2,
 44000, 4, 39200, 2, 39200, 4, 31113, 2,
 29366, 4, 27718, 2, 29366, 4, 31113, 2,
 34923, 10, 34923, 2,
 29366, 4,29366, 2,29366, 2,27718, 2,29366, 2,
 58733, 4,46616, 2,46616, 4,34923, 2,
 32963, 4,52325, 2,52325, 4,52325, 2,
 52325, 10, 46616, 2,
 44000, 4,52325, 2,52325, 2,49388, 2,52325, 2,
 39200, 4,52325, 2,52325, 2,49388, 2,52325, 2,
 34923, 4,32963, 2,34923, 4,32963, 2,
 34923, 6, 31113, 6,
 29366, 2,27718, 2,29366, 2,39200, 4,34923, 2,
 29366, 6,23308, 6,
 19600, 6,26162, 6,
 23308, 10,
 26162, 2,24694, 2,26162, 2,44000, 4,39200, 2,
 34923, 6,46616, 6,
 44000, 6,39200, 6,
 34923, 10, 34923, 2,
 39200, 4,39200, 2,39200, 2,36999, 2,39200, 2,
 44000, 6,44000, 6,
 46616, 4,46616, 2,52325, 4,52325, 2,
 58733, 10, 58733, 2,
 52325, 4,46616, 2,39200, 4,31113, 2,
 29366, 6,23308, 6,
 26162, 6,22000, 6,
 23308, 4,23308, 2, 26162, 6,
 34923, 4,34923, 2,32963, 2,34923, 2,39200, 2,
 34923, 4,34923, 2,34923, 4,26162, 2,
 44000, 4,44000, 2,39200, 2,44000, 2,46616, 2,
 44000, 10, 44000, 2,
 46616, 4,39200, 2,32963, 4,58733, 2,
 52325, 4,46616, 2,44000, 4,52325, 2,
 52325, 2,58733, 2,52325, 2,46616, 2,44000, 2,39200, 2,
 34923, 4,100, 6
};
#define INDEX_XxY(sprite,bytewidth,byteheight,frame,bitrow,bytecol) sprite[(((frame) * (bytewidth) * (byteheight)) << 3) + (bitrow) * (bytewidth) + (bytecol)]
unsigned char wall1[72]= {
  0, 0, 0,127, 63,254, 73, 34, 34, 73, 63,254,127, 0, 0, 73, 3,255, 73, 2, 73,127, 2, 73,
 73,123,255, 73, 74, 73,127, 74, 73, 73,123,255, 73, 74, 73, 73, 74, 73,127,123,255, 0, 0, 0,
 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,255,255,255};
unsigned char wall2[72] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 34, 9, 8, 54, 15, 24, 28, 70, 80, 8,194,117,200,146, 99, 13,166, 98, 69, 36, 38, 71, 44,
 60, 62, 40, 49,188, 48, 35, 24, 16, 51, 25,144, 19, 25,152, 19, 25,152, 51, 29,152,255,255,255};
unsigned char wc1[72] = {
  0, 0, 0,121, 83,127, 73, 84, 73, 73, 84, 73,120,227,127, 72, 0, 0, 75,255,223,123,255,213,
 75, 0,213, 75, 0,223,123, 0,213, 3, 0,223,123, 0,213, 75, 0,213,123, 0,223, 3,255,192,
 87, 0,213, 3, 0,192, 3, 0,192, 3, 0,192, 3, 0,192, 3, 0,192, 3, 0,192,255,255,255};
unsigned char wc2[81] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 1, 0,128,105, 0,128,105, 0,169, 79, 0, 73, 67, 0, 69,194, 0, 70,110,255,198,
 56, 0,108, 56, 0, 60, 48, 0, 56, 48, 0, 48, 48, 0, 48, 48, 0,112, 48, 0,112,255,255,255};
#define INDEX_16x16(sprite,frame,bitrow,bytecol) sprite[((frame) << 5) | ((bitrow) << 1) | (bytecol)]
unsigned char warming[5*16] = {
  0, 12, 28, 24, 56, 48, 60, 177,
 60, 20, 20, 22, 23, 24, 28, 255,
  0, 12, 28, 24, 56, 48, 60,179,
 56, 30, 15, 28, 56, 28, 0,255,
  0, 12, 28, 24, 56, 48, 60,177,
 62, 34, 36, 38, 39, 48, 56,255,
  0, 12, 28, 24, 56, 48, 60,177,
 56, 28, 14, 28, 56, 28, 0,255,
  0, 0, 0, 0, 0, 0, 0,255,
  0, 0, 0, 0, 0, 0, 0,255
  };
unsigned char start[64] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12,255,189,
  0,120, 0,232, 1,200, 3,248, 11, 40, 31,108, 19,116,255,255,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12,251,253,
  7,248, 7, 8, 7,136, 12,200, 24,104, 48,108, 24,116,255,255};
unsigned char run_right[5*32] = {
  0, 0, 12, 0, 28, 0, 24, 0, 56, 0, 48, 0, 48, 0,189,255,
 36, 0,108, 0, 72, 0, 76, 0,206, 0,192, 0, 96, 0,255,255,
  0, 0, 1,128, 3,128, 3, 0, 7, 0, 6, 0, 6, 0,246,255,
  7, 0, 5,128, 5,128, 31, 0, 27, 0, 25,128, 8, 0,255,255,
  0, 0, 0, 96, 0,224, 0,192, 1,192, 1,128, 1,128,253,191,
  1,192, 0,192, 7,192, 6,192, 5,128, 1,128, 0,192,255,255,
  0, 0, 0, 24, 0, 56, 0, 48, 0,112, 0, 96, 0, 96,255,111,
  0, 96, 0,112, 0,248, 0,240, 0,224, 0,192, 0,224,255,255,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,255,255,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,255,255};
unsigned char run_left[5*32] = {
  0, 0, 0, 48, 0, 56, 0, 24, 0, 28, 0, 12, 0, 12,255,189,
  0, 36, 0, 54, 0, 18, 0, 50, 0,115, 0, 3, 0, 6,255,255,
  0, 0, 1,128, 1,192, 0,192, 0,224, 0, 96, 0, 96,255,111,
  0,224, 1,160, 1,160, 0,248, 0,216, 1,152, 0, 16,255,255,
  0, 0, 6, 0, 7, 0, 3, 0, 3,128, 1,128, 1,128,253,191,
  3,128, 3, 0, 3,224, 3, 96, 1,160, 1,128, 3, 0,255,255,
  0, 0, 24, 0, 28, 0, 12, 0, 14, 0, 6, 0, 6, 0,246,255,
  6, 0, 14, 0, 31, 0, 15, 0, 7, 0, 3, 0, 7, 0,255,255,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,255,255,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,255,255};
#define INDEX_8x24(sprite,frame,bitrow) sprite[((frame) * 3) << 3 | (bitrow)]
unsigned char run_up[5*24] = {
  0, 0, 0, 0, 0, 0, 0,255,
  0, 24, 24, 24, 60, 60, 60,185,
 60, 60, 52, 44, 44, 96, 96,255,
  0, 0, 0, 0, 0, 0, 0,219,
 24, 24, 60, 60, 60, 56, 60,189,
 20, 52, 60, 60, 12, 0, 0,255,
  0, 0, 0, 0, 0, 24, 24,153,
 60, 60, 60, 56, 60, 60, 28,185,
 56, 60, 28, 0, 0, 0, 0,255,
  0, 0, 24, 24, 24, 60, 60,189,
 56, 60, 60, 28, 20, 52, 60,255,
  0, 0, 0, 0, 0, 0, 0,255,
  0, 0, 0, 0, 0, 0,255,255,
  0, 0, 0, 0, 0, 0,255,255,
  0, 0, 0, 0, 0, 0,255,255};
unsigned char run_down[5*24] = {
  0, 24, 24, 24, 60, 60, 60,185,
 56, 56,168,232,104, 12, 12,255,
  0, 0, 0, 0, 0, 0, 0,255,
  0, 0, 0, 24, 24, 24, 60,189,
 60, 56, 56, 60, 54, 60,108,101,
 32, 0, 0, 0, 0, 0, 0,255,
  0, 0, 0, 0, 0, 24, 24,219,
 60, 60, 60, 56, 56, 60,124,121,
 32, 48, 48, 0, 0, 0, 0,255,
  0, 0, 0, 0, 0, 0, 0,255,
 24, 24, 60, 60, 60, 56, 56,187,
 60, 36,124,120, 48, 0, 0,255,
  0, 0, 0, 0, 0, 0,255,255,
  0, 0, 0, 0, 0, 0,255,255,
  0, 0, 0, 0, 0, 0,255,255};
#define INDEX_8x16(sprite,frame,bitrow) sprite[(frame) << 4 | (bitrow)]
unsigned char piss[5*16] = {
  0, 24, 24, 24, 62, 62, 62, 28,
 60, 60,124,102, 82,195,211,255,
  0, 24, 24, 24, 62, 62, 62, 28,
 60, 60,124,118, 66,211,235,255,
  0, 24, 24, 24, 62, 62, 62, 28,
 60, 60,124,102, 82,195,211,255,
  0, 24, 24, 24, 62, 62, 62, 28,
 60, 60,124,118, 66,211,235,255,
  0, 0, 0, 0, 0, 0, 0,255,
  0, 0, 0, 0, 0, 0, 0,255
  };
#define INDEX_8x8(sprite,frame,bitrow) sprite[(frame) << 3 | (bitrow)]
unsigned char bottle1[8] =
{ 0, 24, 36, 60, 60, 60, 24,255};
unsigned char bottle2[8] = {
  0, 24, 24, 52, 52, 52, 60,255};
unsigned char floor[8] = {
  0, 0, 0, 0, 0, 0, 0,255};
unsigned char food[8] = {
  0, 12, 22, 44,120, 48, 0,255};
unsigned char life[8] = {
 56, 56, 16,126,122, 60,110,110};
unsigned char indicator_left[8] = {
224,128,128, 0, 0,128,128,224};
unsigned char indicator_right[8] = {
  7, 1, 1, 0, 0, 1, 1, 7};
unsigned char empty_field[8] = {
  0, 0, 0, 0, 0, 0, 0, 255};
unsigned char corners[32] = {
  0, 0, 0, 0,128,128,192,240,
  0, 0, 0, 0, 1, 1, 3, 15,
 15, 3, 1, 1, 0, 0, 0, 0,
240,192,128,128, 0, 0, 0, 0};
unsigned char mi_title[512] = {
255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255,
195,159,255,126, 0,127,188, 0, 131,207, 14, 28,255,131,255,255, 255,248, 57,225,248,112,228, 0, 254, 6, 64, 8, 50, 0,124, 63,
227, 28,124, 62, 60,124, 60,204, 227, 30, 3, 24,255, 17,255,255, 255, 6, 49,206,112, 24,196,204, 193,140,115,220, 99,102,115,207,
226, 24,120, 63,126,124, 31,142, 227, 28, 3, 16,255, 48,255,255, 255,142, 33,156, 96, 24,135,142, 227,136, 51, 92, 65,199,115, 15,
225,144, 59,190,126,125,223,158, 231,153,241, 0,255, 49,225,248, 127,142, 1,152, 15,136, 7,158, 227,136, 51,124, 65,199,113, 31,
225,134, 59,158, 30,127,207, 30, 231,155,251, 12,255, 63,128,134, 63,142, 25,156, 95,216,103, 30, 227,134, 48,124, 49,207,113,255,
243,142,120, 30, 97,252, 15, 31, 231,155,251, 28,255, 59, 0,196, 63,142, 57,159,223,216,231, 31, 227,199, 51,254, 57,143,240, 15,
243,140,119,142,103,251,207, 24, 224, 27,251, 28,254, 3, 62,196, 127,142, 57,143,223,216,231, 24, 227,207,115,198,123,140, 63,135,
243,156,247,142, 99, 59,199, 24, 103,153,247,156,255,155,126,199, 255,143, 57,143,207,188,231, 24, 99,207,113,134,123,140, 17,135,
243,156,247,142, 34, 55,199, 28, 103,156, 7,156,255,159, 0,199, 255,143, 57,143, 96, 60,231, 28, 99,206,113,134,115,198, 33,143,
227,152, 79,128, 51, 39,195,140, 195,140, 15, 28,255,207,129,129, 254, 0, 57,192,224,120,231,142, 128,142, 96, 28,115,199, 35,143,
255,143,243,255,240,121,255,193, 255,255, 31,255,127,135,227,255, 255,255,254,225,248,255,251,193, 255,255,191,255,253,240,248, 63,
255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255, 255,255,255,255,255,255,255,255};
char *read_me[21] =
{
 "This game made for the notable",
 "contest of CSS Crap Game Compo.",
 "",
 "The goal is to run through the",
 "tracks. Since you incontinent,",
 "you will need to piss, but your",
 "success will depend on where.",
 "",
 "Have fun! Run!",
 "",
 "Keys:",
 "  'q' - up",
 "  'a' - down",
 "  'o' - left",
 "  'p' - right",
 "  'm' - piss",
 "",
 "Press and key to go to main menu",
 "",
 "          Laszlo Simon",
 "     laszlo.simon@gmail.com"
};
char read_me_colors[21]={0x47, 0x47, 0x00, 0x07, 0x07, 0x07, 0x07, 0x00,
                          0x42, 0x00, 0x07, 0x46, 0x46, 0x46, 0x46, 0x46,
                          0x00, 0xC2, 0x00, 0x44, 0x45};
char *infos[7] =
{
  "Prepare"
 ,"Start!"
 ,"You win the 1st section"
 ,"You win the 2nd section"
 ,"You are the champion!"
 ,"You lose. Try again."
 ,"You Should do it in WC!"
};
char *main_menu[21] =
{
  ""
 ,""
 ,"           MAIN MENU"
 ,""
 ,""
 ,"      1. START THE GAME"
 ,""
 ,"      2. READ THE READ ME"
 ,""
 ,"      3. SWITCH MUSIC ON/OFF"
 ,"         aka SHUT UP"
 ,""
 ,""
 ,"          CHOOSE OPTION!       "
 ,""
 ,""
 ,""
 ,""
 ,""
 ,""
 ,"   2009 Made by Laszlo Simon"
  };
char main_menu_colors[21]={0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46,
                            0x47, 0x46, 0x46, 0x47, 0x47, 0xC2, 0x47, 0x47,
                            0x47, 0x07, 0x07, 0x47, 0x47};
#define SCREEN_ADDR 0x4000
#define SCRATTR_ADDR 0x5800
#define TIERCE_SIZE 0x0800
#define FIRSTROW_YPOS 7
#define WC_YPOS 3
#define ROW_NUM 8
#define NUM_MOVE 6
#define ID_NOMOVE 0
#define ID_LEFT 1
#define ID_RIGHT 2
#define ID_DOWN 3
#define ID_UP 4
#define ID_PISS 5
#define ID_FORCEDPISS 6
#define NUM_PLAYERS 4
#define ID_X 0
#define ID_Y 1
#define ID_W 2
#define ID_H 3
#define ID_NUM 4
#define is_wc(wall_map,x_pos) ( (wall_map) & (0x01 << (x_pos)) )
char boldfont[768];
signed char moves[6] =
{
  0,
  -1,
  1,
  32,
  -32,
  0
};
unsigned int move_sprites[6];
#define LEVEL_NUM 2
#define LEVEL_LENGTH 5
#define TRACK_LENGHT 30
#define MENU_MAIN 0
#define MENU_README 1
#define MENU_GAME 10
#define MENU_GAME_OVER 11
#define MENU_GAME_END 11
#define MENU_GAME_WIN 11
unsigned char menu_state = 0;
unsigned char level = 2;
unsigned char music_on = 0;
unsigned char track[4] = {0,0,0,0};
unsigned int tracks_level_1[5] = { 0x11, 0x16, 0x24, 0x00, 0x12};
unsigned int tracks_level_2[5] = { 0x11, 0x16, 0x24, 0x00, 0x12};
#define INIT_POS (FIRSTROW_YPOS * 32 + 1)
unsigned int pos[4] = {(7 * 32 + 1),
                                   ((7 +2) * 32 + 1),
                                   ((7 +4) * 32 + 1),
                                   ((7 +6) * 32 + 1)};
unsigned char n = 0;
unsigned char move[4] = {0,0,0,0};
unsigned char piss_storage[4] = 0;
unsigned char lives = 5;
unsigned int way = 0;
signed char move_coords[4*6] =
{
0, 0, 1, 2,
-1, 0, 2, 2,
0, 0, 2, 2,
0, 0, 1, 3,
0, -1, 1, 3,
0, 0, 1, 2,
};
struct in_UDK keyboard_joy;
void *joyfunc = in_JoyKeyboard;
int music_play(void)
{
  static unsigned int i = 0;
  float duration;
  unsigned int dur_int;
  unsigned int ch = 0;
  unsigned char j;
  if (music_on)
  {
    duration = (float)tune[i+1] * 72 / (1000*30);
    dur_int = (int)(duration * 15000) / 20;
    for (j = 0; j < dur_int; j++)
    {
      bit_frequency(0.02, (float)tune[i] / 100);
      ch = in_Inkey();
      if (ch != 0) break;
    }
    i += 2;
    if (i >= 2*(138-32))
    {
      i = 0;
    }
  }
  else
  {
    ch = in_Inkey();
  }
  return (ch);
}
void draw_title(void)
{
  unsigned char j;
  unsigned int i;
  char *row_addr;
  char *tit_addr;
  for (j = 0; j < 16; j++)
  {
    row_addr = (char *)( 0x4000 + ((j%8) << 8) + ((j >> 3) << 5) );
 tit_addr = (char *)(mi_title + j * 32);
 memcpy(row_addr, tit_addr, 32);
  }
  if (level == 1)
  {
    memset((char *)(0x5800),0x38,32);
    memset((char *)(0x5800 +32),0x78,64);
  }
  if (level == 2)
  {
    memset((char *)(0x5800), 0x60,32);
    memset((char *)(0x5800 +32), 0x20,32);
    memset((char *)(0x5800 +64),96,32);
  }
}
void init_boldfont(void)
{
  unsigned int i;
  unsigned char val;
  unsigned char* addr = (char *)0x3D00;
  for (i = 0; i < 768; i++)
  {
    val = addr[i];
    val |= (val << 1);
    boldfont[i] = val;
  }
}
void print(unsigned char x,
           unsigned char y,
           char* string
           )
{
  unsigned char *charaddr;
  unsigned char *posaddr;
  unsigned char i, j;
  for (i = 0; string[i] != '\0'; i++)
  {
    posaddr = zx_cyx2saddr(y,x+i);
    charaddr = (char *)(boldfont + (string[i] - 32) * 8);
    for (j = 0; j < 8; j++)
    {
      posaddr[j * 8 * 32] = charaddr[j];
    }
  }
}
void draw_sprite(char *sprite,
                 unsigned char w,
                 unsigned char h,
                 unsigned char x,
                 unsigned char y,
                 unsigned char frame)
{
  unsigned char i, j, n;
  unsigned char *posaddr;
  for (n = 0; n < h; n++)
  {
    posaddr = zx_cyx2saddr(y+n,x);
    for (j = n*8; j < (n+1)*8; j++)
    {
      for (i = 0; i < w; i++)
      {
        *(posaddr+i) = sprite[(((frame) * (w) * (h)) << 3) + (j) * (w) + (i)];
      }
      posaddr += 256;
    }
  }
}
void draw_walls(void)
{
  unsigned char i;
  unsigned int track_map;
  unsigned char iswc;
  static unsigned char prev_track_map = 0xFF;
  static unsigned char prev_level = 0xFF;
  if (level == 1) track_map = tracks_level_1[track[0]];
  if (level == 2) track_map = tracks_level_2[track[0]];
  if (level != prev_level)
  {
    if (level == 1) memset((char *)(0x5800 +3*32),0x78,2*32);
    if (level == 1) memset((char *)(0x5800 +5*32),0x68,1*32);
    if (level == 1) memset((char *)(0x5800 +6*32),0x3F,1*32);
    if (level == 1) memset((char *)(0x5800 +7*32),0x38,1*32);
    if (level == 2) memset((char *)(0x5800 +3*32),0x62,2*32);
    if (level == 2) memset((char *)(0x5800 +5*32), 98,32);
    if (level == 2) memset((char *)(0x5800 +6*32),18,1*32);
    if (level == 2) memset((char *)(0x5800 +7*32),16,1*32);
  }
  for (i = 0; i <= 9; i++)
  {
    iswc = (( (track_map) & (0x01 << (i)) ));
    if ( (prev_track_map == 0xFFFF)
        || (level != prev_level)
        || (iswc != (( (prev_track_map) & (0x01 << (i)) )))
        )
    {
      if (iswc)
      {
        if (level == 1)
        {
          draw_sprite(wc1, 3, 3, i*3+1, 3, 0);
          *(char *)(0x5800 + (3 +1) * 32 + i*3+2) = 0x38;
          *(char *)(0x5800 + (3 +2) * 32 + i*3+2) = 0x38;
          *(char *)(0x5800 + (3 +3) * 32 + i*3+2) = 0x30;
          *(char *)(0x5800 + (3 +4) * 32 + i*3+2) = 0x30;
        }
        if (level == 2)
        {
          draw_sprite(wc2, 3, 3, i*3+1, 3, 0);
          *(char *)(0x5800 + (3 +1) * 32 + i*3+2) = 16;
          *(char *)(0x5800 + (3 +2) * 32 + i*3+2) = 16;
          *(char *)(0x5800 + (3 +3) * 32 + i*3+2) = 16;
          *(char *)(0x5800 + (3 +4) * 32 + i*3+2) = 16;
        }
      }
      else
      {
        if (level == 1)
        {
          draw_sprite(wall1, 3, 3, i*3+1, 3, 0);
          *(char *)(0x5800 + (3 +1) * 32 + i*3+2) = 0x78;
          *(char *)(0x5800 + (3 +2) * 32 + i*3+2) = 0x68;
          *(char *)(0x5800 + (3 +3) * 32 + i*3+2) = 0x3F;
          *(char *)(0x5800 + (3 +4) * 32 + i*3+2) = 0x38;
        }
        if (level == 2)
        {
          draw_sprite(wall2, 3, 3, i*3+1, 3, 0);
          *(char *)(0x5800 + (3 +1) * 32 + i*3+2) = 98;
          *(char *)(0x5800 + (3 +2) * 32 + i*3+2) = 98;
          *(char *)(0x5800 + (3 +3) * 32 + i*3+2) = 18;
          *(char *)(0x5800 + (3 +4) * 32 + i*3+2) = 16;
        }
      }
    }
  }
  prev_track_map = track_map;
  prev_level = level;
}
void chartostr(char *str,unsigned char i)
{
  str[0] = 48 + i / 100;
  str[1] = 48 + (i / 10) % 10;
  str[2] = 48 + i % 10;
  str[3] = '\0';
}
void draw_states(void)
{
  char *temp;
  unsigned int distance, piss_indicator, distance_indicator;
  piss_indicator = (piss_storage[0] + 5) / 10;
  memset((char *)(0x5800 + 21*32),0x70,piss_indicator);
  memset((char *)(0x5800 + 21*32 + piss_indicator),0x08,10 - piss_indicator);
  distance_indicator = 15 *
             (((level-1) * 5 + track[0]) * 30 + (pos[0] % 32) - 1) /
             (2 * 5 * 30);
  memset((char *)(0x5800 + 21*32 + 11),96,distance_indicator);
  memset((char *)(0x5800 + 21*32 + 11 + distance_indicator),32,15 - distance_indicator);
  memset((char *)(0x5800 + 21*32 + 27),70,lives);
  memset((char *)(0x5800 + 21*32 + 27 + lives),0x00,5-lives);
}
void draw_ui(void)
{
  char i;
  print(0,19,"BLADDER      DISTANCE      LIVES");
  print(0,23,"INFO: prepare to the race!");
  draw_sprite(corners, 1, 1, 0, 17, 0);
  draw_sprite(corners, 1, 1, 31, 17, 1);
  draw_sprite(corners, 1, 1, 31, 2, 2);
  draw_sprite(corners, 1, 1, 0, 2, 3);
  draw_sprite(empty_field, 1, 1, 0, 5, 0);
  draw_sprite(empty_field, 1, 1, 31, 5, 0);
  draw_sprite(indicator_left, 1, 1, 0, 21, 0);
  draw_sprite(indicator_left, 1, 1, 11, 21, 0);
  draw_sprite(indicator_right, 1, 1, 9, 21, 0);
  draw_sprite(indicator_right, 1, 1, 25, 21, 0);
  for (i = 0; i < 5; i++)
  {
    draw_sprite(life, 1, 1, 27+i, 21, 0);
  }
  memset((char *)(0x5800 +18*32),0x47,6*32);
  memset((char *)(0x5800 + 21*32),0x08,10);
  memset((char *)(0x5800 + 21*32 + 11),32,15);
  memset((char *)(0x5800 + 21*32 + 27),70,5);
}
void draw_field(void)
{
  signed char i;
  char* row_addr;
  for (i = -1; i <= 8; i++)
  {
    row_addr = (char *)(0x4000
                         + ((7 + i) % 8) * 32
                         + (7 * 8 * 32)
                         + ((7 + i) / 8) * 2048 );
    memset(row_addr,0xFF,32);
  }
  if (level == 1)
  {
    memset((char *)(0x5800 +8*32),0x30,32*8);
    memset((char *)(0x5800 +16*32),0x38,2*32);
  }
  if (level == 2)
  {
    memset((char *)(0x5800 +8*32),0x38,32*8);
    memset((char *)(0x5800 +16*32), 16,2*32);
  }
}
int check_keyboard(void)
{
  unsigned char dirs, ret;
  dirs = (joyfunc)(&keyboard_joy);
  ret = 0;
  if (dirs & in_RIGHT) ret = (2);
  if (dirs & in_UP) ret = (4);
  if (dirs & in_DOWN) ret = (3);
  if (dirs & in_LEFT) ret = (1);
  if (dirs & in_FIRE) ret = (5);
  return (ret);
}
unsigned char validate(unsigned int pos,
                         unsigned char move)
{
  unsigned int newpos;
  unsigned char valid = 1;
  unsigned int x_pos, y_pos, x_wall_pos, y_min_pos;
  unsigned int track_map;
  if (level == 1) track_map = tracks_level_1[track[0]];
  if (level == 2) track_map = tracks_level_2[track[0]];
  newpos = pos;
  newpos += moves[move];
  x_pos = newpos % 32;
  y_pos = newpos / 32;
  x_wall_pos = (x_pos - 1)/3;
  y_min_pos = (( (track_map) & (0x01 << (x_wall_pos)) )
                 && ((x_pos % 3) == 2) )
              ? (3 + 1)
              : (7);
  if (y_pos < y_min_pos) valid = 0;
  if (y_pos > (7 +8 -1)) valid = 0;
  if (x_pos < 1) valid = 0;
  if (x_pos > 30) valid = 0;
  return valid;
}
void draw_runner(unsigned char move,
                  unsigned char frame,
                  unsigned int pos,
                  unsigned char clear)
{
  unsigned char X, Y, moveindex;
  char *sprite;
  unsigned char w,h,x,y,i, j, n;
  unsigned char *posaddr;
  moveindex = move * 4;
  X = pos % 32;
  Y = pos / 32;
  if (clear) { frame = 4; }
  draw_sprite(move_sprites[move],
              move_coords[moveindex + 2],
              move_coords[moveindex + 3],
              X + move_coords[moveindex + 0],
              Y + move_coords[moveindex + 1],
              frame);
}
void init(void)
{
  move_sprites[0] = warming;
  move_sprites[1] = run_left;
  move_sprites[2] = run_right;
  move_sprites[3] = run_down;
  move_sprites[4] = run_up;
  move_sprites[5] = piss;
  keyboard_joy.fire = in_LookupKey('m');
  keyboard_joy.left = in_LookupKey('o');
  keyboard_joy.right = in_LookupKey('p');
  keyboard_joy.up = in_LookupKey('q');
  keyboard_joy.down = in_LookupKey('a');
}
void redraw(unsigned char clear)
{
  char i;
  static signed char prevlevel = 0;
  static signed char prevtrack = -1;
  if (clear == 0)
  {
    if (level != prevlevel)
    {
      zx_border(0);
      draw_ui();
      draw_title();
      draw_field();
    }
    prevlevel = level;
    if (track[0] != prevtrack)
    {
      draw_walls();
    }
    prevtrack = track[0];
    draw_states();
  }
  for (i=0; i< 4; i++)
  {
    draw_runner(move[i], (n+i)%4, pos[i], clear);
  }
}
void check_piss_state(void)
{
  static char prev_piss_state = 0;
  if (
         (move[0] == 5)
      && (prev_piss_state == 0)
      )
  {
    if ((pos[0] / 32) > (3 + 1))
    {
      if (lives>0) lives--;
    }
  }
  prev_piss_state = (move[0] == 5);
  piss_storage[0] = (piss_storage[0] < 100) ? (piss_storage[0]+1) : (100);
  if (move[0] == 5) piss_storage[0] = (piss_storage[0] < 10) ? 0 : piss_storage[0] - 10;
}
int game_main(void)
{
  unsigned int time = 0;
  unsigned char place = 255;
  unsigned int i;
  while (lives > 0)
  {
    if ((move[0] == 0) && (check_keyboard() != 0)) move[0] = 0;
    if (n == 0) move[0] = check_keyboard();
    if (!validate(pos[0], move[0])) move[0] = 0;
    if (pos[0] % 32 == 30)
    {
      redraw(1);
      track[0]++;
      if (track[0] >= 5)
      {
        track[0] = 0;
        level++;
      }
      pos[0] = (pos[0] / 32) * 32 + 1;
    }
    redraw(0);
    if (n == 3)
    {
      pos[0] += moves[move[0]];
    }
    check_piss_state();
    time++;
    n = time % 4;
  }
  if (lives <= 0) return(11);
  place = 1;
  for (i = 1; i < 4; i++)
    if (pos[0] < pos[i]) place++;
  if (place == 1) return(11);
  if (place > 1) return(11);
}
void draw_init()
{
  zx_border(0);
  memset(0x4000,0x00,0x1800);
  draw_title();
  memset(0x5800 + 64,0x07,768 - 64);
}
void draw_read_me(void)
{
  unsigned char i;
  for (i=0; i<21; i++)
  {
    memset(0x5800 + (i+3)*32,read_me_colors[i],32);
    print(0,i+3,read_me[i]);
  }
}
void draw_menu_main(void)
{
  unsigned char i;
  for (i=0; i<21; i++)
  {
    memset(0x5800 + (i+3)*32,main_menu_colors[i],32);
    print(0,i+3,main_menu[i]);
  }
  for (i = 0; i < 16; i++)
  {
    draw_sprite(move_sprites[2],2,2,i*2,19,i%4);
  }
}
int main(void)
{
  unsigned int ch;
  int *temp;
  int prev_menu_state = 255;
  bit_open();
  init();
  init_boldfont();
  while(1)
  {
    switch(menu_state)
    {
      case 0:
        if (prev_menu_state != menu_state)
        {
          draw_init();
          draw_menu_main();
        }
        else
        {
          in_Wait(300);
        }
        ch = 0;
        while
        (
           (ch != '1') &&
           (ch != '2') &&
           (ch != '3')
        )
        {
          ch = music_play();
        }
        prev_menu_state = menu_state;
        if (ch == '1') menu_state = 10;
        if (ch == '2') menu_state = 1;
        if (ch == '3') music_on = !music_on;
      break;
      case 1:
        draw_init();
        draw_read_me();
        ch = 0;
        while(ch == 0)
        {
          ch = music_play();
        }
        prev_menu_state = menu_state;
        menu_state = 0;
      break;
      case 10:
        draw_init();
        game_main();
        prev_menu_state = menu_state;
        menu_state = 11;
      break;
      case 11:
        ch = getkey();
        prev_menu_state = menu_state;
        menu_state = 0;
      break;
    }
  }
  bit_close();
}
